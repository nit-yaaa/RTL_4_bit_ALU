// Design:
module alu_4bit(
    input logic [3:0] A, B,
    input logic [2:0] opcode,
    output logic [3:0] result,
    output logic carry_out,
    output logic zero
);

    always_comb begin
        carry_out = 0;
        case (opcode)
            3'b000: {carry_out, result} = A + B;       // ADD
            3'b001: {carry_out, result} = A - B;       // SUB
            3'b010: result = A & B;                    // AND
            3'b011: result = A | B;                    // OR
            3'b100: result = ~A;                       // NOT A
            3'b101: result = A ^ B;                    // XOR
            default: result = 4'b0000;
        endcase
    end

    assign zero = (result == 4'b0000);

endmodule
